// <auto-generated />
using System;
using BadHabbits.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BadHabbits.DataAccess.Migrations
{
    [DbContext(typeof(BadHabbitsDbContext))]
    [Migration("20250525111315_price_update")]
    partial class price_update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BadHabbits.DataAccess.Models.Cigarette", b =>
                {
                    b.Property<Guid>("CigaretteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("NicotineAmount")
                        .HasColumnType("real");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("TarAmount")
                        .HasColumnType("int");

                    b.Property<bool>("WithFilter")
                        .HasColumnType("bit");

                    b.HasKey("CigaretteId");

                    b.ToTable("Cigarettes");
                });
#pragma warning restore 612, 618
        }
    }
}
